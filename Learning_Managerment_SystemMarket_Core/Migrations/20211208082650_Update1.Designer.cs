// <auto-generated />
using System;
using Learning_Managerment_SystemMarket_Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Learning_Managerment_SystemMarket_Core.Migrations
{
    [DbContext(typeof(LMSDbContext))]
    [Migration("20211208082650_Update1")]
    partial class Update1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.AdminSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeyNameID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6388),
                            KeyNameID = "c_p",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6399),
                            Value = "Copyright Policy<br>"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6407),
                            KeyNameID = "p_p",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6410),
                            Value = "Privacy Policy<br>"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6414),
                            KeyNameID = "terms",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6416),
                            Value = "terms"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6421),
                            KeyNameID = "logo",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6423),
                            Value = "/frontend/images/logo.svg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6427),
                            KeyNameID = "favicon",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6429),
                            Value = "/frontend/images/fav.png"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6434),
                            KeyNameID = "admin_commission",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6436),
                            Value = "3"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6440),
                            KeyNameID = "currency_code",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6442),
                            Value = "USD"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6446),
                            KeyNameID = "currency_symbole",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6449),
                            Value = "$"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6453),
                            KeyNameID = "notification",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6456),
                            Value = "0"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6460),
                            KeyNameID = "default_theme",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6462),
                            Value = "night-mode"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6466),
                            KeyNameID = "instructor_verification",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6469),
                            Value = "0"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6473),
                            KeyNameID = "user_verification",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6476),
                            Value = "0"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6480),
                            KeyNameID = "facebook",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6482),
                            Value = "facebook"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6486),
                            KeyNameID = "twitter",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6488),
                            Value = "twitter"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6493),
                            KeyNameID = "linkedin",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6496),
                            Value = "linkedin"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6499),
                            KeyNameID = "Instagram",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6502),
                            Value = "Instagram"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6506),
                            KeyNameID = "youtube",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6508),
                            Value = "youtube"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6512),
                            KeyNameID = "pinterest",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6515),
                            Value = "pinterest"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6519),
                            KeyNameID = "verification_subscriber",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6521),
                            Value = "500"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6525),
                            KeyNameID = "verification_sell",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6528),
                            Value = "100"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6532),
                            KeyNameID = "paypal",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6534),
                            Value = "0"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6544),
                            KeyNameID = "palypal_client_id",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6547),
                            Value = ""
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6550),
                            KeyNameID = "stripe",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6553),
                            Value = "0"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6557),
                            KeyNameID = "stripe_pk",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6559),
                            Value = "0"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6563),
                            KeyNameID = "razorpay",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6566),
                            Value = "0"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6570),
                            KeyNameID = "seo_title",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6572),
                            Value = "Online Courses - Anytime, Anywhere Cursus"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6576),
                            KeyNameID = "seo_description",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6579),
                            Value = "is the world&#39;s largest destination for online courses. Discover an online course and start learning a new skill today."
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6583),
                            KeyNameID = "seo_meta",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6585),
                            Value = "online,courses,learning,teaching"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6589),
                            KeyNameID = "seo_twitter_title",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6591),
                            Value = "Online Courses - Anytime, Anywhere"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6595),
                            KeyNameID = "seo_canonical",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6598),
                            Value = "https://coursearly.com/cursus/public/"
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6601),
                            KeyNameID = "dark_logo",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6604)
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6607),
                            KeyNameID = "footer_logo",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(6610),
                            Value = "footerlpgo.png"
                        });
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Cart", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Photography",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(5908),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(5941),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Marketing",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(5951),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(5954),
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Development",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(5960),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(5963),
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Business",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6086),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6090),
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Design",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6094),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6097),
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6100),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6103),
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "IT & Software",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6107),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6109),
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Finance & Accounting",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6114),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6117),
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Office Productivity",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6121),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6124),
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Personal Development",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6129),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6131),
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Lifestyle",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6135),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6138),
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Health & Fitness",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6142),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6144),
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Teaching & Academics",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6148),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(6150),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Dislike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBestseller")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PromotionVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Share")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubTitile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.CourseContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseContents");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.CourseRate", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Messge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseRates");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FAQFor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FAQs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Manage your account settings.",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(9567),
                            FAQFor = 0,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(9579),
                            Question = "Account/Profile"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Manage your account settings.",
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(9587),
                            FAQFor = 1,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(9590),
                            Question = "Account/Profile"
                        });
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailNotification")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InstructorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PushNotification")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.InstructorDiscusstion", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dislikes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Likes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorDiscusstions");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.InstructorVerify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorVerifies");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 972, DateTimeKind.Local).AddTicks(3055),
                            LanguageName = "English",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 975, DateTimeKind.Local).AddTicks(894),
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 975, DateTimeKind.Local).AddTicks(2283),
                            LanguageName = "Vietnamese",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 975, DateTimeKind.Local).AddTicks(2298),
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 975, DateTimeKind.Local).AddTicks(2303),
                            LanguageName = "Korean",
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 975, DateTimeKind.Local).AddTicks(2307),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseContentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Positon")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseContentId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.LikeDislikeCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForWhat")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("LikeDislikeCourses");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WhoIs")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForWhat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForWho")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4025),
                            EmailTitle = "Cource Approved",
                            ForWhat = "Cource Approved",
                            ForWho = 2,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4036),
                            NotificationTitle = "Cource Approved",
                            Subject = "Cource Approved"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4046),
                            EmailTitle = "Course Sell",
                            ForWhat = "Course Sell",
                            ForWho = 2,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4049),
                            NotificationTitle = "Course Sell",
                            Subject = "Course Sell"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4055),
                            EmailTitle = "Payout Update",
                            ForWhat = "Payout Update",
                            ForWho = 2,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4057),
                            NotificationTitle = "Payout Update",
                            Subject = "Payout Update"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4062),
                            EmailTitle = "Review Added",
                            ForWhat = "Review Added",
                            ForWho = 2,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4065),
                            NotificationTitle = "Review Added",
                            Subject = "Review Added"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4069),
                            EmailTitle = "Thanks For Review",
                            ForWhat = "Thanks For Review",
                            ForWho = 1,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4072),
                            NotificationTitle = "Thanks For Review",
                            Subject = "Thanks For Review"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4077),
                            EmailTitle = "Report Feedback",
                            ForWhat = "Report Feedback",
                            ForWho = 1,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4079),
                            NotificationTitle = "Report Feedback",
                            Subject = "Report Feedback"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4084),
                            EmailTitle = "Cource Block",
                            ForWhat = "Cource Block",
                            ForWho = 2,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4086),
                            NotificationTitle = "Cource Block",
                            Subject = "Cource Block"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4091),
                            EmailTitle = "Live Now (Subscribe Institute)",
                            ForWhat = "Live Now (Subscribe Institute)",
                            ForWho = 1,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4094),
                            NotificationTitle = "Live Now (Subscribe Institute)",
                            Subject = "Live Now (Subscribe Institute)"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4098),
                            EmailTitle = "New Course (Subscribe Institute)",
                            ForWhat = "New Course (Subscribe Institute)",
                            ForWho = 1,
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 979, DateTimeKind.Local).AddTicks(4101),
                            NotificationTitle = "New Course (Subscribe Institute)",
                            Subject = "New Course (Subscribe Institute)"
                        });
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminCommission")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.PayOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Remark")
                        .HasColumnType("int");

                    b.Property<int>("StatusPay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("PayOuts");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.PaytabsInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Curency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("PaytabsInvoices");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.ReportAbuse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("ReportAbuses");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "fc85aa59-4f78-4426-b023-f5e422eaa552",
                            GuardName = "Web",
                            Name = "Admin S",
                            NormalizedName = "Admin S"
                        });
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SavedCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("SavedCourses");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SpecialDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Percentage")
                        .HasPrecision(8, 5)
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("SpecialDiscounts");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9774),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9788),
                            Status = 1,
                            SubCategoryName = "CSS"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9798),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9801),
                            Status = 1,
                            SubCategoryName = "JS"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9806),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9808),
                            Status = 1,
                            SubCategoryName = "Digital Marketing"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9812),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9815),
                            Status = 1,
                            SubCategoryName = "UI Design"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9820),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9823),
                            Status = 1,
                            SubCategoryName = "Full Stack Development"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9828),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9831),
                            Status = 1,
                            SubCategoryName = "B2B Business"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9835),
                            ModifiedDate = new DateTime(2021, 12, 8, 15, 26, 48, 978, DateTimeKind.Local).AddTicks(9838),
                            Status = 1,
                            SubCategoryName = "Python"
                        });
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SubScription", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("SubScriptions");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("WhoIs")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.WebLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsRtl")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebLanguages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Claim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>");

                    b.ToTable("RoleClaims");

                    b.HasDiscriminator().HasValue("Claim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Role_Create",
                            ClaimValue = "Role_Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Role_Edit",
                            ClaimValue = "Role_Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Role_Access",
                            ClaimValue = "Role_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Role_Access",
                            ClaimValue = "Role_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Role_Delete",
                            ClaimValue = "Role_Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "User_Create",
                            ClaimValue = "User_Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "User_Edit",
                            ClaimValue = "User_Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "User_Access",
                            ClaimValue = "User_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "User_Show",
                            ClaimValue = "User_Show",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "User_Delete",
                            ClaimValue = "User_Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Language_Create",
                            ClaimValue = "Language_Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Language_Edit",
                            ClaimValue = "Language_Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Language_Access",
                            ClaimValue = "Language_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Language_Show",
                            ClaimValue = "Language_Show",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Language_Delete",
                            ClaimValue = "Language_Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Category_Create",
                            ClaimValue = "Category_Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Category_Edit",
                            ClaimValue = "Category_Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Category_Access",
                            ClaimValue = "Category_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Category_Show",
                            ClaimValue = "Category_Show",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Category_Delete",
                            ClaimValue = "Category_Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "SubCategory_Create",
                            ClaimValue = "SubCategory_Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "SubCategory_Edit",
                            ClaimValue = "SubCategory_Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "SubCategory_Access",
                            ClaimValue = "SubCategory_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "SubCategory_Show",
                            ClaimValue = "SubCategory_Show",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "SubCategory_Delete",
                            ClaimValue = "SubCategory_Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "Instructor_Edit",
                            ClaimValue = "Instructor_Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "Instructor_Access",
                            ClaimValue = "Instructor_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "Instructor_Show",
                            ClaimValue = "Instructor_Show",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "Course_Access",
                            ClaimValue = "Course_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "Course_Show",
                            ClaimValue = "Course_Show",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "Verification_Access",
                            ClaimValue = "Verification_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "FAQ_Create",
                            ClaimValue = "FAQ_Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "FAQ_Show",
                            ClaimValue = "FAQ_Show",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "FAQ_Edit",
                            ClaimValue = "FAQ_Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "FAQ_Access",
                            ClaimValue = "FAQ_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "FAQ_Delete",
                            ClaimValue = "FAQ_Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "Student_Edit",
                            ClaimValue = "Student_Edit",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "Student_Access",
                            ClaimValue = "Student_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "Student_Show",
                            ClaimValue = "Student_Show",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "PayOut_Access",
                            ClaimValue = "PayOut_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "Setting_Access",
                            ClaimValue = "Setting_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "Report_Access",
                            ClaimValue = "Report_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "Notification_Access",
                            ClaimValue = "Notification_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "FeedBack_Access",
                            ClaimValue = "FeedBack_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "Lang_Access",
                            ClaimValue = "Lang_Access",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "Lang_Create",
                            ClaimValue = "Lang_Create",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "Lang_Delete",
                            ClaimValue = "Lang_Delete",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "Lang_Edit",
                            ClaimValue = "Lang_Edit",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Cart", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", "Course")
                        .WithMany("Carts")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", "Student")
                        .WithMany("Carts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.SubCategory", "SubCategory")
                        .WithMany("Courses")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instructor");

                    b.Navigation("Language");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.CourseContent", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", "Course")
                        .WithMany("CourseContent")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.CourseRate", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", "Course")
                        .WithMany("CourseRates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.InstructorDiscusstion", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Instructor", "Instructor")
                        .WithMany("InstructorDiscusstions")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.InstructorVerify", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Lecture", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.CourseContent", "CourseContent")
                        .WithMany()
                        .HasForeignKey("CourseContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseContent");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.LikeDislikeCourse", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Notification", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Instructor", null)
                        .WithMany("Notifications")
                        .HasForeignKey("InstructorId");

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", null)
                        .WithMany("Notifications")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Order", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", "Course")
                        .WithMany("Orders")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", "Student")
                        .WithMany("Orders")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.PayOut", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.PaytabsInvoice", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.ReportAbuse", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SavedCourse", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", "Course")
                        .WithMany("SavedCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SpecialDiscount", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", "Course")
                        .WithMany("SpecialDiscounts")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SubCategory", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SubScription", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Instructor", "Instructor")
                        .WithMany("SubScriptions")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", "Student")
                        .WithMany("SubCriptions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Learning_Managerment_SystemMarket_Core.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Course", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CourseContent");

                    b.Navigation("CourseRates");

                    b.Navigation("Orders");

                    b.Navigation("SavedCourses");

                    b.Navigation("SpecialDiscounts");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Instructor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("InstructorDiscusstions");

                    b.Navigation("Notifications");

                    b.Navigation("SubScriptions");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.Student", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("SubCriptions");
                });

            modelBuilder.Entity("Learning_Managerment_SystemMarket_Core.Models.Entities.SubCategory", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
